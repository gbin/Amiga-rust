@DATABASE "Default"
@NODE "Main" "Main"
@WORDWRAP

                       Amiga Executable File Structure.
                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

@{" 1. Overview. " LINK "Overview"}
@{" 2. Hunk Types. " LINK "HunkTypes"}
@{" 3. Reading executable files from your programs. " LINK "ReadingExes"}
@{" 4. Reloc Tables (more info). " LINK "RelocTablesMore"}
@{" 5. History. " LINK "History"}
@{" 6. Future. " LINK "Future"}
@{" 7. Credits/Thank You's. " LINK "Thanks"}
@{" 8. Contact address. " LINK "Contact"}
@ENDNODE

@NODE "Overview" "Overview"


1. Overview.
~~~~~~~~~~~~

When an Amiga program is created, there is no telling where in memory
this file will be located. Different accelerator cards even use different
areas to address their expansion memory.
The Amigas OS needs a way to control loading of executable files, for various
reasons, suppose for example, that a program is already in the memory area
that you wanted your program to go? The Amiga OS takes care of all of this
`relocation' by structuring executable files.

Amiga programs are split into various segments, known as Hunks.
This guide was created because I could find no decent reference to the
Amiga file structure, I gathered what information I could find, and added
some stuff I found out myself, the result is this file. There is still some
information missing, if you can fill in the blanks I've left, then please
(e)mail me.
@ENDNODE

@NODE "HunkTypes" "HunkTypes"


2. Hunk Types.
~~~~~~~~~~~~~~

Each hunk has a code, which is constructed thus...

 1 byte - memory type for this hunk
 3 byte - code defining the hunk

 There are only three types of memory type available here,
  Hunk_Advisory - bit 29
  Hunk_Chip     - bit 30
  Hunk_Data     - bit 31

 If the Hunk_Advisory bit is set, then there will follow another longword
 containing the flags for a AllocMem() call.
 If they aren't understood, this hunk is ignored, and treated just like
 @{"HUNK_DEBUG" LINK "3f1"} hunks.
 NOTE: this handling of HUNKB_ADVISORY started as of V39 dos.library!   If
 loading such executables is attempted under <V39 dos, it will fail with a
 bad hunk type.


* In the following explanations, for simplicity the first byte is always zero.

Possible hunk types

@{" $000003E7 Hunk_Unit         " LINK "3e7"}
@{" $000003E8 Hunk_Name         " LINK "3e8"}
@{" $000003E9 Hunk_Code         " LINK "3e9"}
@{" $000003EA Hunk_Data         " LINK "3ea"}
@{" $000003EB Hunk_Bss          " LINK "3eb"}
@{" $000003EC Hunk_Reloc32      " LINK "3ec"}
@{" $000003ED Hunk_Reloc16      " LINK "3ed"}
@{" $000003EE Hunk_Reloc8       " LINK "3ee"}
@{" $000003EF Hunk_Ext          " LINK "3ef"}
@{" $000003F0 Hunk_Symbol       " LINK "3f0"}
@{" $000003F1 Hunk_Debug        " LINK "3f1"}
@{" $000003F2 Hunk_End          " LINK "3f2"}
@{" $000003F3 Hunk_Header       " LINK "3f3"}
 $000003F4 Doesnt exist [Wonder why?]
@{" $000003F5 Hunk_Overlay      " LINK "3f5"}
@{" $000003F6 Hunk_Break        " LINK "3f6"}
 $000003F7 Hunk_Drel32            Unknown structure
 $000003F8 Hunk_Drel16            Unknown structure
 $000003F9 Hunk_Drel8             Unknown structure
 $000003FA Hunk_Lib               Unknown structure
 $000003FB Hunk_Index             Unknown structure
@{" $000003FC Hunk_Reloc32Short " LINK "3fc"}
 $000003FD Hunk_RelReloc32        Unknown structure
 $000003FE Hunk_AbsReloc16        Unknown structure
@ENDNODE

@NODE "3e7" "Hunk_Unit"


$000003E7 Hunk_Unit
 This hunktype only occurs in object files output from a compiler before
 linking, they are not executable, and are not really worth processing.
 After the $000003E7 comes the length of the name of the hunk, then the
 name of the hunk which must end on a longword boundary.
@ENDNODE

@NODE "3e8" "Hunk_Name"


$000003E8 Hunk_Name
 This hunk is just like the names in code/data hunks, but doesn't contain
 anything else. After the $000003E8 is the name of the name and then the
 name itself, which must end on a longword boundary.
@ENDNODE

@NODE "3e9" "Hunk_Code"


$000003E9 Hunk_Code
 This hunk contains the program section which can run after absolute addresses
 are corrected. After the code $000003E9 comes the length of code to follow
 (in longs) followed by the actual longwords.
 There is no reason why this segment cannot contain data.
@ENDNODE

@NODE "3ea" "Hunk_Data"


$000003EA Hunk_Data
 This hunk contains data used from some other Code section.
 Some longwords may need relocation, for instance if they contain data such
 as..
 
 MemPtr Dc.l    Buffer

 Then the address `Buffer' must be corrected.

 This hunk is structured in the same way as @{"Hunk_Code" LINK "3e9"}
@ENDNODE

@NODE "3eb" "Hunk_Bss"


$000003EB Hunk_Bss
 This area is used much like a data section, but can only contain zeros
 For this reason, all thats needed to store is the number of zeros (In longs)
@ENDNODE

@NODE "3ec" "Hunk_Reloc32"


$000003EC Hunk_Reloc32
 These hunks can occur after a code/data hunk but are not always necessary.
 This block contains the offsets and hunk numbers which need absolute addresses
 corrected, or `relocated'. These hunks contain what are known as `reloc-tables'
 and they are structured as follows..

        * $000003EC (Hunk_Reloc32)
        * Number of offsets in this table
        * Hunk Number these relocs are used on
        * Offsets

        You may now have another table straight afterwards...

        - Number of offsets in this table
        - Hunk Number these relocs are used on
        - Offsets

        This is repeated, until you have a longword of $00000000 to indicate
        no more relocs

If for some reason you need to relocate files yourself, then all you have to
do, is read the hunk number from the reloc table, get the address of this hunk
and then add it to the offsets of the code/data hunk this table was attached to.
@ENDNODE

@NODE "3ed" "Hunk_Reloc16"


$000003ED Hunk_Reloc16
 These tables are constructed in much the same was as hunk_reloc32, but they
 use words instead of longwords for offsets.
@ENDNODE

@NODE "3ee" "Hunk_Reloc8"


$000003EE Hunk_Reloc8
 These tables are constructed in much the same was as hunk_reloc32, but they
 use bytes instead of longwords for offsets. I have never seen these relocs
 exist in any file, as the file would need a section size of less than 256
 bytes, and for something this small, the program may as well be made
 PC-relative, disposing of the need for hunk_reloc8's
@ENDNODE

@NODE "3ef" "Hunk_ext"


$000003EF Hunk_Ext

 This hunktype only occurs in object files output from a compiler before
 linking, they are not executable, and are not really worth processing.
 This hunk contains the names of unresolved external references created
 when an assembler used the XDEF operative. These are usually processed by
 linking with amiga.o or the likes.

 After the $000003EF are several `symbol data units' followed by a zero word
 these symbol definitions are defined as follows:

 1 byte : symbol type
 3 byte : length of the name (in longwords)

 Possible symbol types are:

 Name           Value   Explanation
 Ext_symb       0       Symbol table
 Ext_def        1       Relocatable definition
 Ext_abs        2       Absolute definition
 Ext_res        3       Reference to resident library [Obsolete]
 Ext_CommonDef  4       Common definition (value is size in bytes)
 Ext_ref32      129     32 bit absolute reference to symbol
 Ext_common     130     32 bit absolute reference to COMMON block
 Ext_ref16      131     16 bit PC-relative reference to symbol
 Ext_ref8       132     8 bit PC-relative reference to symbol
 Ext_dext32     133     32 bit data relative reference
 Ext_dext16     134     16 bit data relative reference
 Ext_dext8      135     8 bit data relative reference

 * These are to support some of the '020 and up modes that are rarely used
 Ext_relref32   136     32 bit PC-relative reference to symbol
 Ext_relcommon  137     32 bit PC-relative reference to COMMON block

 * for completeness... All 680x0's support this
 Ext_absref16   138     16 bit absolute reference to symbol

 * this only exists on '020's and above, in the (d8,An,Xn) address mode
 Ext_absref8    139     8 bit absolute reference to symbol

@ENDNODE

@NODE "3f0" "Hunk_Symbol"


$000003F0 Hunk_Symbol
 This hunk contains symbols with their names and values, mainly of use to
 disassemblers/debuggers, This table will allow a debugger to refer to
 addresses by their name rather than address. The code $000003F0 is followed
 by symbol data units terminated by a zero.
@ENDNODE

@NODE "3f1" "Hunk_Debug"


$000003F1 Hunk_Debug
 The structure of this hunk is somewhat undefined, and is left pretty much
 up to the imagination of the debugger programmer. It can contain anything.
 Its structure is the $000003F1 follwowed by the number of longwords in the
 hunk, then the longwords themselves.
@ENDNODE

@NODE "3f2" "Hunk_End"


$000003F2 Hunk_End
 This is the only necessary longword in this hunk. It marks the last longword
 of the last code/data hunk in the file. It is NOT necessary to have a hunk_end
 at the end of EVERY code/data hunk.
@ENDNODE

@NODE "3f3" "Hunk_Header"


$000003F3 Hunk_Header

An Amiga executable file always starts with the longword $000003F3, this is
known as HUNK_HEADER. Each hunk can have a name, there is no reason for them
to, and AmigaDos just ignores them. They could be advantagous for debugging
maybe, but other than that, no reason. The first longword after HUNK_HEADER
is the length of the name in longwords, followed by the actual name itself
if the length is not a multiple of 4, there will be zeroes up till the next
multiple of 4 characters, If there is no name for this particular hunk, then
there will be a zero stored in the length field.
If there was a name, then after the name characters, will come the name of the
second hunk, until a $00000000 longword appears.

After the names, we have a field with the number of hunks +1, followed by
two other fields The hunk to load first, and the hunk to load last.
I haven't experimented with these last two fields, and cannot really see
anything advantageous that can come from them.

Next, we have one longword for every hunk that follows.
These longwords are used by dos.library in an AllocMem() call, and for
this reason, they may be bigger than the sizes specified in the individual
hunks. This is known as adding BSS areas to code/data hunks.


So, an overview of hunk_header is..

        * $00003F3 (Hunk_Header)
        * Length of name of first hunk (In longwords)
           (or zero if none)
        - Name of hunk
        - Length of name of second hunk (If exists) (or zero if none)
        - Name of hunk
          ...
        * $0000000 (End of list)
        * Highest hunk number +1
        * Number of hunk to load first
        * Number of hunk to load last
        * One longword for every hunk to follow, specifying size.

After a hunk header, you'll find...

        * 1 long containing hunk type
        * 1 long containing size of the code/data in this hunk
        - 1 long containing @{"hunk_end ($000003F2)" LINK "3f2"} [optional after 1st hunk]
@ENDNODE

@NODE "3f5" "Hunk_Overlay"


$000003F5 Hunk_Overlay
 This is another area I cant find documentation for.
 This hunk is needed when working with overlay files, where a memory arae
 occupied by the program is overwritten by another program or data segment.
 The table after the $000003F5 code contains specification about the table
 size, the number of overlays and the overlay data itself.
 The table is identified by a Dc.l $ABCD
@ENDNODE

@NODE "3f6" "Hunk_Break"


$000003F6 Hunk_Break
 This hunk marks the end of an overlay program section.
@ENDNODE

@NODE "3fc" "Hunk_Reloc32Short"


$000003FC Hunk_Reloc32Short
 This hunk can only exist in files meant for OS V39.
 Earlier versions of the OS use ($000003f7) Hunk_Drel32 instead
 These tables are constructed in much the same was as hunk_reloc32, but they
 use words instead of longwords for number of offsets, hunknumber, and offsets.
@ENDNODE

@NODE "ReadingExes" "Reading exe files"


3. Reading executable files in your programs.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

How you read an executable file in your program depends on what you want to do
to it, and what parts you need.
For example, if you only need the Code/Data/Bss sections, then you can use
dos.library/loadseg() which will handle all relocation, bss hunk expanding etc
automatically.

If you want to (for example) write a debugger, and single-step a program
displaying program labels e.t.c., then you'll need to use the dos.library
Open() & Read() calls, taking into consideration, the following.

1. Absolute addresses must be relocated.
   A routine for relocating hunks (In 680x0 assembly) follows.

; a5 points to a variables area
; RelocTableAddresses is a pointer to a list of double-longwords,
; reloc hunk, hunk reloc hunk was attached to.
; HunkAddresses is a list of pointers to the code/data hunks.
;
Relocate        Move.l  RelocTableAddresses(a5),a0
                Cmp.w   #0,a0
                Beq.b   .NoHunks

                Move.l  HunkAddresses(a5),a1

.GetTable       Tst.l   (a0)
                Beq.b   .EndOfTable

                Move.l  (a0)+,a2                ; Get reloc table
                Cmp.w   #0,a2
                Beq.b   .EndOfTable
                Move.l  (a0)+,a3                ; Get Ptr to hunk reloc was for

.NextTable      Move.l  (a2)+,d0                ; Get Num of offsets
                Beq.b   .GetTable               ; Empty!

                Subq.l  #1,d0                   ; Correct for DBra
                Move.l  (a2)+,d1                ; Get Hunk number

                Move.l  (a1,d1*4),d2            ; Get Ptr to Hunk

.RelocLoop      Move.l  (a2)+,d1                ; Get offset
                Add.l   d2,(a3,d1.l)
                Dbra    d0,.RelocLoop
                Bra.b   .NextTable
.NoHunks
.EndOfTable     Rts


If you want to support word based reloc tables, then you'll need the following
routine instead.

.RelocWordTable Move.l  (a0)+,a2                ; Get reloc table
                Cmp.w   #0,a2
                Beq.b   .EndOfTable
                Move.l  (a0)+,a3                ; Get Ptr to hunk reloc was for

.NextTableW     Move.w  (a2)+,d0                ; Get Num of offsets
                Ext.l   d0
                Beq.b   .GetTable               ; Empty!

                Subq.l  #1,d0                   ; Correct for DBra
                Move.w  (a2)+,d1                ; Get Hunk number
                Ext.l   d1

                Move.l  (a1,d1*4),d2            ; Get Ptr to Hunk

.RelocLoopW     Move.w  (a2)+,d1                ; Get offset
                Add.l   d2,(a3,d1.w)
                Dbra    d0,.RelocLoopW
                Bra.b   .NextTableW



2. Bss areas at the end of the code/data hunks must be supported
    This is done by calling allocmem() an area of clear memory, with the size
    of hunk from the hunk_header, and then CopyMem() the hunk contents there.
3. The pointers to the next hunk must be faked
   (On loadseg'ing a file, accessing the longword 4 bytes before the first
    line of code will get a pointer to the next hunk)
@ENDNODE

@NODE "RelocTablesMore" "Reloc Tables (More)"


4. Reloc Tables (more info).
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
There is no reason for a program to have ANY reloc tables.
They make the program larger, and make code slower.
By changing the style of your programming, you can create reloc-free code.
The new style enforces PC-relativity.

Reads can be easily converted by using..

        move.l  Variable,d0     ->      move.l  Variable(PC),d0

Writes are a little more difficult. You have two alternatives.

1.
        Lea     Variable(PC),a0
        Move.l  d0,(a0)

This method sucks, as you need two instructions for one write.
The other method is much better.

2.
At the top of your code, you have something such as,
        Lea     Variables(PC),a5
Make sure that a5 doesnt get changed anywhere, and then use,
        Move.l  d0,Variable-Variables(a5)


The other problem people have, is relocs to other hunks.
You cannot use Lea Variable(PC),ax because the other hunk could be located
*ANYWHERE* in memory, and (PC) addressing can only reach 32768 bytes in each
direction. The answer? Segment manipulation.

When a hunk is loaded, immediatly before the first long of the hunk,
dos.library places a BCPL pointer to the next hunk.
So if we have a code hunk and a data hunk, and we want to get access to the
variables in the data hunk, we can use code such as...

                Section FirstHunk,Code
HunksBegin
                Move.l  HunksBegin-4(PC),d0     ; Get the BPTR
                Lsl.l   #2,d0                   ; Make BPTR an address
                Addq.l  #4,d0                   ; Skip the BPTR (Or 0 if lasthunk)

                Move.l  d0,a4

Now the second hunk can be accessed in the method outlined in (2) above.

Instead of adding seperate BSS sections, simply declare all your zero data
at the end of a code/data hunk, and then it can be added as a BSS area to these
hunks by a hunk processor.


Lets see more Reloc free executables!!

And that goes for libraries too!
The function lists can be defined in one of two ways, the first is how some
people do it. (The bad way!)

Vector_Offsets  Dc.l    LibOpen
                Dc.l    LibClose
                Dc.l    LibExpunge
                Dc.l    LibExtFunc
                Dc.l    My_Function1
                Dc.l    My_Function2
                Dc.l    My_Function3
                Dc.l    My_Function4

Next, the cool reloc free way!

Vector_Offsets  Dc.w    -1                              ; Mark begin of table
                Dc.w    My_LibOpen-Vector_Offsets
                Dc.w    My_LibClose-Vector_Offsets
                Dc.w    My_LibExpunge-Vector_Offsets
                Dc.w    My_LibExtFunc-Vector_Offsets
                Dc.w    My_Function1-Vector_Offsets
                Dc.w    My_Function2-Vector_Offsets
                Dc.w    My_Function3-Vector_Offsets
                Dc.w    My_Function4-Vector_Offsets
                Dc.w    -1                              ; Mark end of table
@ENDNODE

@NODE "History" "History"


5. History.
~~~~~~~~~~~

Sep 21 1996 : Initial release.
@ENDNODE

@NODE "Future" "Future"


6. Future.
~~~~~~~~~~

* Adding more information on overlay files.
* Adding information about unsupported hunks.
        $000003F7 Hunk_Drel32
        $000003F8 Hunk_Drel16
        $000003F9 Hunk_Drel8
        $000003FA Hunk_Lib
        $000003FB Hunk_Index
        $000003FC Hunk_Reloc32Short
        $000003FD Hunk_RelReloc32
        $000003FE Hunk_AbsReloc16
* Any other suggestions
* Corrections (Have I got anything wrong?)
@ENDNODE

@NODE "Thanks" "Thanks"


7. Credits/Thank You's.
~~~~~~~~~~~~~~~~~~~~~~~

BillRiker - Thanks for prompting me to finish this file on IRC, I've had this
            in preparation for some time, but never got around to finishing it.
@ENDNODE

@NODE "Contact" "Contact"


8. Contact Address.
~~~~~~~~~~~~~~~~~~~
Feel free to contact me for ideas, corrections e.t.c., or even just to say
`thanks for that doc!'

You can snailmail me at..

 Dave Jones.
 40,Heol Edward Lewis,
    Gelligaer,
    Hengoed,
    Mid Glamorgan,
    Cf82 8ej,
    South Wales,
    U.k.

Please include postage if you require a reply.
If you are just requesting an update, then I will hold onto your postage
until the next release is ready. If you are not residing in the Uk, then
just send two extra disks as payment.

Or you can E-Mail at...

                         DJones@CardiffCyberCafe.Co.Uk

If you are just sending a `hello/thank you' don't expect a reply, as I get
kinda busy sometimes, but if you have a question, I'll try and respond as
soon as humanely possible.

I can also be found on IRC #Amiga as `Termy' usually on a saturday
afternoon for an hour or so.

Soon, You'll also be able to read all the latest developments of this text,
and my other projects on the WorldWideWeb, as soon as I get time to make some
pages.
@ENDNODE

